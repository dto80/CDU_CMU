// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.cmucdu.ecommerce.domain.product;

import edu.cmucdu.ecommerce.dao.product.ProductPicDao;
import edu.cmucdu.ecommerce.domain.product.ProductDataOnDemand;
import edu.cmucdu.ecommerce.domain.product.ProductPic;
import edu.cmucdu.ecommerce.domain.product.ProductPicDataOnDemand;
import edu.cmucdu.ecommerce.domain.product.SellerProduct;
import edu.cmucdu.ecommerce.domain.util.Description;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductPicDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductPicDataOnDemand: @Component;
    
    private Random ProductPicDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductPic> ProductPicDataOnDemand.data;
    
    @Autowired
    private ProductDataOnDemand ProductPicDataOnDemand.productDataOnDemand;
    
    @Autowired
    ProductPicDao ProductPicDataOnDemand.productPicDao;
    
    public ProductPic ProductPicDataOnDemand.getNewTransientProductPic(int index) {
        ProductPic obj = new ProductPic();
        setDescription(obj, index);
        setImage(obj, index);
        setImageType(obj, index);
        setSellerProduct(obj, index);
        return obj;
    }
    
    public void ProductPicDataOnDemand.setDescription(ProductPic obj, int index) {
        Description description = null;
        obj.setDescription(description);
    }
    
    public void ProductPicDataOnDemand.setImage(ProductPic obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void ProductPicDataOnDemand.setImageType(ProductPic obj, int index) {
        String imageType = "imageType_" + index;
        obj.setImageType(imageType);
    }
    
    public void ProductPicDataOnDemand.setSellerProduct(ProductPic obj, int index) {
        SellerProduct sellerProduct = null;
        obj.setSellerProduct(sellerProduct);
    }
    
    public ProductPic ProductPicDataOnDemand.getSpecificProductPic(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductPic obj = data.get(index);
        Long id = obj.getId();
        return productPicDao.findOne(id);
    }
    
    public ProductPic ProductPicDataOnDemand.getRandomProductPic() {
        init();
        ProductPic obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return productPicDao.findOne(id);
    }
    
    public boolean ProductPicDataOnDemand.modifyProductPic(ProductPic obj) {
        return false;
    }
    
    public void ProductPicDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = productPicDao.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductPic' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductPic>();
        for (int i = 0; i < 10; i++) {
            ProductPic obj = getNewTransientProductPic(i);
            try {
                productPicDao.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            productPicDao.flush();
            data.add(obj);
        }
    }
    
}
