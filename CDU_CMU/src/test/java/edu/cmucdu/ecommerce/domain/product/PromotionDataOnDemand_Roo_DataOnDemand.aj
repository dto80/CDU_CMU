// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.cmucdu.ecommerce.domain.product;

import edu.cmucdu.ecommerce.dao.product.PromotionDao;
import edu.cmucdu.ecommerce.domain.product.Promotion;
import edu.cmucdu.ecommerce.domain.product.PromotionDataOnDemand;
import edu.cmucdu.ecommerce.domain.product.SellerProduct;
import edu.cmucdu.ecommerce.domain.util.Description;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PromotionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PromotionDataOnDemand: @Component;
    
    private Random PromotionDataOnDemand.rnd = new SecureRandom();
    
    private List<Promotion> PromotionDataOnDemand.data;
    
    @Autowired
    PromotionDao PromotionDataOnDemand.promotionDao;
    
    public Promotion PromotionDataOnDemand.getNewTransientPromotion(int index) {
        Promotion obj = new Promotion();
        setAbsoluteDiscount(obj, index);
        setDescription(obj, index);
        setPercentDiscount(obj, index);
        setProduct(obj, index);
        setStartDate(obj, index);
        setStopDate(obj, index);
        return obj;
    }
    
    public void PromotionDataOnDemand.setAbsoluteDiscount(Promotion obj, int index) {
        double absoluteDiscount = new Integer(index).doubleValue();
        obj.setAbsoluteDiscount(absoluteDiscount);
    }
    
    public void PromotionDataOnDemand.setDescription(Promotion obj, int index) {
        Description description = null;
        obj.setDescription(description);
    }
    
    public void PromotionDataOnDemand.setPercentDiscount(Promotion obj, int index) {
        double percentDiscount = new Integer(index).doubleValue();
        obj.setPercentDiscount(percentDiscount);
    }
    
    public void PromotionDataOnDemand.setProduct(Promotion obj, int index) {
        SellerProduct product = null;
        obj.setProduct(product);
    }
    
    public void PromotionDataOnDemand.setStartDate(Promotion obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void PromotionDataOnDemand.setStopDate(Promotion obj, int index) {
        Date stopDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStopDate(stopDate);
    }
    
    public Promotion PromotionDataOnDemand.getSpecificPromotion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Promotion obj = data.get(index);
        Long id = obj.getId();
        return promotionDao.findOne(id);
    }
    
    public Promotion PromotionDataOnDemand.getRandomPromotion() {
        init();
        Promotion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return promotionDao.findOne(id);
    }
    
    public boolean PromotionDataOnDemand.modifyPromotion(Promotion obj) {
        return false;
    }
    
    public void PromotionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = promotionDao.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Promotion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Promotion>();
        for (int i = 0; i < 10; i++) {
            Promotion obj = getNewTransientPromotion(i);
            try {
                promotionDao.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            promotionDao.flush();
            data.add(obj);
        }
    }
    
}
