// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.cmucdu.ecommerce.web;

import edu.cmucdu.ecommerce.dao.product.ProductDao;
import edu.cmucdu.ecommerce.dao.product.ProductPicDao;
import edu.cmucdu.ecommerce.dao.product.SellerProductDao;
import edu.cmucdu.ecommerce.domain.product.ProductPic;
import edu.cmucdu.ecommerce.web.ProductPicController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProductPicController_Roo_Controller {
    
    @Autowired
    ProductPicDao ProductPicController.productPicDao;
    
    @Autowired
    ProductDao ProductPicController.productDao;
    
    @Autowired
    SellerProductDao ProductPicController.sellerProductDao;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ProductPicController.create(@Valid ProductPic productPic, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, productPic);
            return "productpics/create";
        }
        uiModel.asMap().clear();
        productPicDao.save(productPic);
        return "redirect:/productpics/" + encodeUrlPathSegment(productPic.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ProductPicController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ProductPic());
        return "productpics/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ProductPicController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("productpic", productPicDao.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "productpics/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ProductPicController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("productpics", productPicDao.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) productPicDao.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("productpics", productPicDao.findAll());
        }
        return "productpics/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ProductPicController.update(@Valid ProductPic productPic, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, productPic);
            return "productpics/update";
        }
        uiModel.asMap().clear();
        productPicDao.save(productPic);
        return "redirect:/productpics/" + encodeUrlPathSegment(productPic.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ProductPicController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, productPicDao.findOne(id));
        return "productpics/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ProductPicController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ProductPic productPic = productPicDao.findOne(id);
        productPicDao.delete(productPic);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/productpics";
    }
    
    void ProductPicController.populateEditForm(Model uiModel, ProductPic productPic) {
        uiModel.addAttribute("productPic", productPic);
        uiModel.addAttribute("products", productDao.findAll());
        uiModel.addAttribute("sellerproducts", sellerProductDao.findAll());
    }
    
    String ProductPicController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
